{% extends 'layout.twig' %}

{% block body %}


	<div style="height:25px; width: 100%; text-align:right; padding-right:0px; color: #000;">
		<span id="accountaddress" style="font-size:20px;">{{loadedAccount}}</span> <button style="border:0px; padding:3px; background: transparent;" data-clipboard-target="#accountaddress" id="copyaddress"><i class="icofont-copy" style="font-size:20px; cursor: pointer;"></i></button>
	</div>
	<div id='transactiongrid' style="height:100%; width:100%;"></div>



{% endblock %}
{% block javascripts %}
<script>window.Big = require('big.js');</script>
<script>
$(document).ready(function() {

	var loadedAddress = "{{loadedAccount}}";

  	new ClipboardJS('#copyaddress');
  	
  	$('#copyaddress').popover({trigger: 'focus', content: "{{ i18n.__("Copied") }}", delay: { "hide": 900 }});
	
	
	
	function forceRefresh() {

		setTimeout(function() { 
			$('#forcerefrsh').addClass('icofont-rotate-90');
		},200);

		setTimeout(function() { 
			$('#forcerefrsh').removeClass('icofont-rotate-90');
		},400);

		setTimeout(function() { 
			$('#forcerefrsh').addClass('icofont-rotate-90');
		},600);

		setTimeout(function() { 
			$('#forcerefrsh').removeClass('icofont-rotate-90');
		},800);
		
		socket.emit('forcerefresh');
	
	}
	
	const grid = new gridjs.Grid({
	  columns: [
	  	{
	  		id: 'date',
	  		name: '{{ i18n.__("Date") }}'
	  	},
	  	{
	  		id: 'type',
	  		name: '{{ i18n.__("Type") }}',
			formatter: (cell) => {
				return gridjs.html(cell == 'Send' ? '<span style="color:red;">{{ i18n.__("Send") }}</span>' : '<span style="color:green;">{{ i18n.__("Receive") }}</span>');
			},
	  	},
	  	{
	  		id: 'txid',
	  		name: '{{ i18n.__("TransactionId") }}'
	  	},
	  	{
	  		id: 'amount',
	  		name: '{{ i18n.__("Amount") }}',
			formatter: (cell) => {
				return gridjs.html("<div style='text-align:right;'>" + cell + " BMB</div>");
			},
			sort: {
				compare: (a, b) => {
				  const code = (x) => parseFloat(x.replace(" BMB", ''));

				  if (code(a) > code(b)) {
					return 1;
				  } else if (code(b) > code(a)) {
					return -1;
				  } else {
					return 0;
				  }
				}
			}
		}
	  ],
      search: {
        enabled: true
      },
	  language: {
		'search': {
		  'placeholder': '🔍 search...'
		},
	  },
	  style: { 
		table: { 
		  'white-space': 'nowrap'
		}
	  },
	  sort: {
		multiColumn: true
	  },
	  pagination: {
		enabled: false
	  },
	  fixedHeader: true,
	  height: 'calc(100vh - 151px)',
	  data: () => {
		return new Promise(resolve => {
		
			socket.emit('transactionList', function(data) {

				resolve(
				  data.map(txinfo => [
					(new Date(parseInt(txinfo.timestamp))).toLocaleString(),
					txinfo.to == loadedAddress ? 'Receive' : 'Send',
					txinfo.txid,
					Big(txinfo.amount).div(10**4).toFixed(4)
				  ])
				);

			});
		
		});
	  }
	}).render(document.getElementById("transactiongrid"));

	class RightTopSpanPlugin extends gridjs.BaseComponent {

		render() {
  
			return gridjs.h('span', {
								style: 'float:right; font-size:22px; padding: 5px; padding-right:0px;',
								id: 'accountValue',
								}, '');

		}
		
	}

	grid.plugin.add({
	  id: 'accountValue',
	  component: RightTopSpanPlugin,
	  position: gridjs.PluginPosition.Header,
	  order: 1
	});



	socket.emit('accountInfo', function(accountInfo) {
	
		$('#accountaddress').html(accountInfo.address);
		
		loadedAddress = accountInfo.address;
		
		let formattedBalance = Big(0).toFixed(4) + " BMB <i id='forcerefrsh' class='icofont-refresh' style='cursor:pointer;'></i>";
		
		try {
			formattedBalance = Big(accountInfo.balance).toFixed(4) + " BMB <i id='forcerefrsh' class='icofont-refresh' style='cursor:pointer;'></i>";
		} catch (e) {
		
		}
		
		$('#accountValue').html(formattedBalance);
		
		$('#forcerefrsh').off('click');
		$('#forcerefrsh').on('click', function() {
			forceRefresh();
		});

	});

	socket.on('accountUpdate', function () { 
		
        grid.updateConfig({
          data: () => {
			return new Promise(resolve => {
		
				socket.emit('transactionList', function(data) {
					
					resolve(
					  data.map(txinfo => [
						(new Date(parseInt(txinfo.timestamp))).toLocaleString(),
						txinfo.to == loadedAddress ? 'Receive' : 'Send',
						txinfo.txid,
						Big(txinfo.amount).div(10**4).toFixed(4)
					  ])
					);

				});
		
			});
		  },
		  plugins: [
			{
			  id: 'accountValue',
			  component: RightTopSpanPlugin,
			  position: gridjs.PluginPosition.Header,
			  order: 1
			}
		  ]
        }).forceRender();

		
		socket.emit('accountInfo', function(accountInfo) {
	
			$('#accountaddress').html(accountInfo.address);
		
			loadedAddress = accountInfo.address;
		
			let formattedBalance = Big(0).toFixed(4) + " BMB <i id='forcerefrsh' class='icofont-refresh' style='cursor:pointer;'></i>";
		
			try {
				formattedBalance = Big(accountInfo.balance).toFixed(4) + " BMB <i id='forcerefrsh' class='icofont-refresh' style='cursor:pointer;'></i>";
			} catch (e) {
		
			}
		
			$('#accountValue').html(formattedBalance);

			$('#forcerefrsh').off('click');
			$('#forcerefrsh').on('click', function() {
				forceRefresh();
			});
		
		});
		
	});

});    
    
</script>
{% endblock %}